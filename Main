import numpy as np
import random
from Arbol import Arbol
import networkx as nx
import matplotlib.pyplot as plt


#Matriz de Total Caballos
Total = np.zeros((5, 5))
dimension = Total.shape
for x in range(dimension[0]):
    for y in range (dimension[1]):
        Total[x, y] = random.randint(0,99)
        
print ("Listado de participantes:" )
print (Total,'\n')
        
#Primeras 5 Carreras
print ("Listado de 5 primeras carreras:" )
for x in range(5):
  print(" Carrera ", x + 1, Total[x])


#Resultados primeras 5 carreras

print("\nResultados de menor a mayor: ")
for x in range(5):
  Total[x].sort() 
  print(" Carrera ", x + 1, Total[x]) 
  

#Carrera 6
print("\nCarrera 6 entre los mas rapidos:")
primeros= np.array([Total[0,4],Total[1,4],Total[2,4],Total[3,4],Total[4,4]])
print(primeros)

#Acomodo Final
print("\nAcomodo despues de carrera 6:")
final = Total[np.argsort(Total[:, 4])]
for x in range(5):
  print(final[x]) 

#Carrera 7
print("\nCarrera 7 por el segundo lugar:")
carrera7 = np.array([final[2, 4],final[3, 4],final[3, 3],final[4, 3],final[4, 2]])
print(carrera7)
carrera7.sort()

#Resultados
print("\nResultados:")
print("Primer lugar:", int(final[4,4]), "pts")
print("Segundo lugar:", int(carrera7[4]), "pts")

print("\nLista FINAL")
listafinal = np.concatenate(final)
listafinal.sort()
print(listafinal)

arbol= Arbol(int(Total[0, 0]), "Caballo  1")
arbol.agregar(int(Total[0, 1]),"Caballo  2")
arbol.agregar(int(Total[0, 2]),"Caballo  3")
arbol.agregar(int(Total[0, 3]),"Caballo  4")
arbol.agregar(int(Total[0, 4]),"Caballo  5")
arbol.agregar(int(Total[1, 0]),"Caballo  6")
arbol.agregar(int(Total[1, 1]),"Caballo  7")
arbol.agregar(int(Total[1, 2]),"Caballo  8")
arbol.agregar(int(Total[1, 3]),"Caballo  9")
arbol.agregar(int(Total[1, 4]),"Caballo 10")
arbol.agregar(int(Total[2, 0]),"Caballo 11")
arbol.agregar(int(Total[2, 1]),"Caballo 12")
arbol.agregar(int(Total[2, 2]),"Caballo 13")
arbol.agregar(int(Total[2, 3]),"Caballo 14")
arbol.agregar(int(Total[2, 4]),"Caballo 15")
arbol.agregar(int(Total[3, 0]),"Caballo 16")
arbol.agregar(int(Total[3, 1]),"Caballo 17")
arbol.agregar(int(Total[3, 2]),"Caballo 18")
arbol.agregar(int(Total[3, 3]),"Caballo 19")
arbol.agregar(int(Total[3, 4]),"Caballo 20")
arbol.agregar(int(Total[4, 0]),"Caballo 21")
arbol.agregar(int(Total[4, 1]),"Caballo 22")
arbol.agregar(int(Total[4, 2]),"Caballo 23")
arbol.agregar(int(Total[4, 3]),"Caballo 24")
arbol.agregar(int(Total[4, 4]),"Caballo 25")

arbol.lista()

Caballos = ["" for x in range(25)]

for x in range(25):
  Dato = arbol.buscar(listafinal[x])
  Caballos[x] = Dato.nombre

Grafo = nx.Graph()
vertices = [Caballos[24], Caballos[23], Caballos[22], Caballos[21], Caballos[20],Caballos[19], Caballos[18], 
              Caballos[17], Caballos[16], Caballos[15], Caballos[14], Caballos[13], Caballos[12], Caballos[11], 
              Caballos[10], Caballos[9], Caballos[8], Caballos[7], Caballos[6], Caballos[5],Caballos[4],
              Caballos[3], Caballos[2], Caballos[1], Caballos[0]]

Grafo.add_nodes_from(vertices)

aristas = [(Caballos[24], Caballos[23]), (Caballos[23], Caballos[22]), (Caballos[22], Caballos[21]), (Caballos[21], Caballos[20]),
             (Caballos[20], Caballos[19]), (Caballos[19], Caballos[18]), (Caballos[18], Caballos[17]), (Caballos[17], Caballos[16]),
             (Caballos[16], Caballos[15]), (Caballos[15], Caballos[14]), (Caballos[14], Caballos[13]), (Caballos[13], Caballos[12]),
             (Caballos[12], Caballos[11]), (Caballos[11], Caballos[10]), (Caballos[10], Caballos[9]), (Caballos[9], Caballos[8]), 
             (Caballos[8], Caballos[7]), (Caballos[7], Caballos[6]), (Caballos[6], Caballos[5]), (Caballos[5], Caballos[4]),
             (Caballos[4], Caballos[3]), (Caballos[3], Caballos[2]), (Caballos[2], Caballos[1]), (Caballos[1], Caballos[0])]

Grafo.add_edges_from(aristas)

ubicacion = {Caballos[24]: (0, 21), Caballos[23]: (5, 21), Caballos[22]: (10, 21), Caballos[21]: (15, 21), Caballos[20]: (20, 21),
         Caballos[19]: (20, 17), Caballos[18]: (15, 17), Caballos[17]: (10, 17), Caballos[16]: (5, 17), Caballos[15]: (0, 17 ), 
         Caballos[14]: (0, 13), Caballos[13]: (5, 13), Caballos[12]: (10, 13), Caballos[11]: (15, 13), Caballos[10]: (20, 13),
         Caballos[9]: (20, 9), Caballos[8]: (15, 9), Caballos[7]: (10, 9), Caballos[6]: (5, 9), Caballos[5]: (0, 9),
         Caballos[4]: (0, 5), Caballos[3]: (5, 5), Caballos[2]: (10, 5), Caballos[1]: (15, 5), Caballos[0]: (20, 5)}

    
nx.draw(Grafo, pos=ubicacion, node_color='red', with_labels=True)
plt.show()
